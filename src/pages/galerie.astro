---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
import Footer from '../components/Footer.astro';
import { Image } from 'astro:assets';

// Importarea imaginilor din assets
import microblading1 from '../assets/img-gallery/microblading1.webp';
import microblading2 from '../assets/img-gallery/microblading2.webp';
import microbladingRezNat from '../assets/img-gallery/microblading-rez-nat.jpg';
import microbladingDefPerf2 from '../assets/img-gallery/microblading-def-perf2.jpg';
import microbladingTehPrecizie2 from '../assets/img-gallery/microblading-teh-precizie2.jpg';

import micropigmentare1 from '../assets/img-gallery/micropigmentare1.webp';
import micropigmentare2 from '../assets/img-gallery/micropigmentare2.webp';
import micropigmentareRezElegant from '../assets/img-gallery/micropigmentare-rez-elegant.jpg';
import micropigmentareAspNatural from '../assets/img-gallery/micropigmentare-asp-natural.jpg';
import micropigmentareDetFine from '../assets/img-gallery/micropigmentare-det-fine.jpg';

import combo1 from '../assets/img-gallery/combo1.webp';
import combo2 from '../assets/img-gallery/combo2.webp';
import comboBrowsProf from '../assets/img-gallery/combo-brows-prof.jpg';
import comboBrowsRezDurata from '../assets/img-gallery/combo-brows-rez-durata.jpg';
import comboBrowsDefPerf from '../assets/img-gallery/combo-brows-def-perf.jpg';

import laminare1 from '../assets/img-gallery/laminare1.webp';
import laminare2 from '../assets/img-gallery/laminare2.webp';
import laminareVolNatural from '../assets/img-gallery/laminare-vol-natural.jpg';
import laminareGene from '../assets/img-gallery/laminare-gene.jpg';

// Imagini pentru secțiunea "Eyeliner" și "Lips Blush"
import eyeliner1 from '../assets/img-gallery/eyeliner1.png';
import eyeliner2 from '../assets/img-gallery/eyeliner2.png';
import eyelinerClasic from '../assets/img-gallery/eyeliner-clasic.jpg';
import eyelinerDetFine from '../assets/img-gallery/eyeliner-det-fine.jpg';
import lipsblush1 from '../assets/img-gallery/lipsblush1.png';
import lipsblushNatural from '../assets/img-gallery/lipsblush-natural.jpg';

const galleries = [
  {
    id: 'microblading',
    title: 'Microblading',
    description: 'Rezultate naturale de microblading prin tehnica manuală de creare a firelor de păr.',
    images: [
      {
        src: microbladingRezNat,
        alt: 'Microblading rezultat natural',
        before: microblading2
      },
      {
        src: microbladingTehPrecizie2,
        alt: 'Microblading tehnică de precizie',
        before: microblading1
      },
      {
        src: microbladingDefPerf2,
        alt: 'Microblading definire perfectă',
        before: microblading2
      }
    ]
  },
  {
    id: 'micropigmentare',
    title: 'Micropigmentare',
    description: 'Sprâncene definite cu aspect natural prin tehnica digitală de micropigmentare.',
    images: [
      {
        src: micropigmentareRezElegant,
        alt: 'Micropigmentare rezultat elegant',
        before: micropigmentare2
      },
      {
        src: micropigmentareAspNatural,
        alt: 'Micropigmentare aspect natural',
        before: micropigmentare1
      },
      {
        src: micropigmentareDetFine,
        alt: 'Micropigmentare detalii fine',
        before: micropigmentare2
      }
    ]
  },
  {
    id: 'combo',
    title: 'Combo Brows',
    description: 'Combinația perfectă între microblading și micropigmentare pentru un rezultat durabil și natural.',
    images: [
      {
        src: comboBrowsProf,
        alt: 'Combo brows aspect profesional',
        before: combo2
      },
      {
        src: comboBrowsDefPerf,
        alt: 'Combo brows rezultat de durată',
        before: combo1
      },
      {
        src: comboBrowsRezDurata,
        alt: 'Combo brows definire perfectă',
        before: combo2
      }
    ]
  },
  {
    id: 'eyeliner',
    title: 'Eyeliner',
    description: 'Eyeliner permanent pentru un look perfect definit în fiecare zi.',
    images: [
      {
        src: eyelinerClasic,
        alt: 'Eyeliner permanent look clasic',
        before: eyeliner2
      },
      {
        src: eyelinerDetFine,
        alt: 'Eyeliner permanent detalii fine',
        before: eyeliner1
      }
    ]
  },
  {
    id: 'lips-blush',
    title: 'Lips Blush',
    description: 'Pigmentare semipermanentă a buzelor pentru un efect natural de hidratare și culoare.',
    images: [
      {
        src: lipsblush1,
        alt: 'Lips Blush efect hidratant',
        before: lipsblush1
      },
      {
        src: lipsblushNatural,
        alt: 'Lips Blush nuanță naturală',
        before: lipsblush1
      }
    ]
  },
  {
    id: 'laminare',
    title: 'Laminare gene/sprâncene',
    description: 'Sprâncene restructurate, cu volum și aspect definit prin tehnica de laminare.',
    images: [
      {
        src: laminareVolNatural,
        alt: 'Laminare volum natural',
        before: laminare2
      },
      {
        src: laminareGene,
        alt: 'Laminare gene',
        before: laminare1
      }
    ]
  }
];
---

<Layout>
  <Navbar />
  
  <main>
    <section class="page-header" data-aos="fade-down">
      <div class="container">
        <h1 class="page-title">Galerie</h1>
        <p class="page-description">
          Descoperă transformările și rezultatele care vorbesc de la sine
        </p>
      </div>
    </section>
    
    <section class="gallery-section">
      <div class="container">
        <div class="gallery-filter" data-aos="fade-up">
          <button class="filter-btn active" data-category="toate">Toate</button>
          {galleries.map(gallery => (
            <button class="filter-btn" data-category={gallery.id}>{gallery.title}</button>
          ))}
        </div>
        
        {galleries.map((gallery, galleryIndex) => (
          <div class="gallery-category" data-category={gallery.id} data-aos="fade-up" data-aos-delay={galleryIndex * 100}>
            <h2 class="gallery-title">{gallery.title}</h2>
            <p class="gallery-description">{gallery.description}</p>
            
            <div class="gallery-grid">
              {gallery.images.map((image, index) => {
                // Handle both object with src property and direct string URL
                const imgSrc = typeof image.src === 'object' && 'src' in image.src ? image.src.src : String(image.src);
                const beforeSrc = typeof image.before === 'object' && 'src' in image.before ? image.before.src : String(image.before);
                
                return (
                  <div class="gallery-item" data-aos="zoom-in" data-aos-delay={index * 100 + galleryIndex * 50}>
                    <div class="image-container">
                      <img 
                        src={imgSrc} 
                        alt={image.alt} 
                        loading="lazy"
                        class="gallery-image"
                      />
                      <div class="image-overlay">
                        <button class="overlay-btn" data-before={beforeSrc} data-after={imgSrc}>
                          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"/>
                            <circle cx="12" cy="12" r="3"/>
                          </svg>
                          Înainte / După
                        </button>
                      </div>
                    </div>
                    <p class="image-caption">{image.alt}</p>
                  </div>
                );
              })}
            </div>
          </div>
        ))}
      </div>
    </section>
    
    <!-- Lightbox pentru afișarea imaginilor în format mare -->
    <div class="lightbox" id="gallery-lightbox">
      <button class="lightbox-close">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
      
      <div class="before-after-container">
        <div class="before-after-slider">
          <img class="before-image" src="" alt="Înainte" />
          <img class="after-image" src="" alt="După" />
          
          <div class="slider-handle">
            <div class="handle-line"></div>
            <div class="handle-circle">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="8 5 12 9 16 5"></polyline>
                <polyline points="16 19 12 15 8 19"></polyline>
              </svg>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
  
  <Footer />
</Layout>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    // Referințe elemente
    const filterButtons = document.querySelectorAll('.filter-btn');
    const galleryCategories = document.querySelectorAll('.gallery-category');
    
    // Funcția de filtrare
    function filterGallery(category) {
      if (category === 'toate') {
        galleryCategories.forEach((cat) => {
          cat.style.display = 'block';
        });
      } else {
        galleryCategories.forEach((cat) => {
          const catName = cat.getAttribute('data-category');
          if (catName === category) {
            cat.style.display = 'block';
          } else {
            cat.style.display = 'none';
          }
        });
      }
    }
    
    // Inițializare butoane de filtrare
    filterButtons.forEach(button => {
      button.addEventListener('click', function() {
        // Resetare stare activă
        filterButtons.forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
        
        // Filtrare
        const category = this.getAttribute('data-category');
        if (category) filterGallery(category);
      });
    });
    
    // Lightbox funcționalitate
    const lightbox = document.getElementById('gallery-lightbox');
    const closeButton = document.querySelector('.lightbox-close');
    const imageContainers = document.querySelectorAll('.image-container');
    const beforeImage = document.querySelector('.before-image');
    const afterImage = document.querySelector('.after-image');
    const sliderHandle = document.querySelector('.slider-handle');
    const beforeAfterContainer = document.querySelector('.before-after-container');
    
    // Închidere lightbox
    closeButton?.addEventListener('click', function() {
      lightbox.style.display = 'none';
      document.body.style.overflow = 'auto';
    });
    
    // Deschidere lightbox
    imageContainers.forEach(imageContainer => {
      const overlayBtn = imageContainer.querySelector('.overlay-btn');
      
      overlayBtn?.addEventListener('click', function() {
        const beforeSrc = this.getAttribute('data-before');
        const afterSrc = this.getAttribute('data-after');
        
        if (beforeSrc && afterSrc) {
          beforeImage.src = beforeSrc;
          afterImage.src = afterSrc;
          
          // Resetare slider
          sliderHandle.style.left = '50%';
          beforeImage.style.width = '50%';
          
          // Afișare lightbox
          lightbox.style.display = 'flex';
          document.body.style.overflow = 'hidden';
        }
      });
    });
    
    // Funcționalitate slider
    let isDragging = false;
    
    sliderHandle?.addEventListener('mousedown', function() {
      isDragging = true;
    });
    
    document.addEventListener('mouseup', function() {
      isDragging = false;
    });
    
    document.addEventListener('mousemove', function(e) {
      if (!isDragging || !beforeAfterContainer) return;
      
      const containerRect = beforeAfterContainer.getBoundingClientRect();
      const containerLeft = containerRect.left;
      const containerWidth = containerRect.width;
      
      let relX = ((e.clientX - containerLeft) / containerWidth) * 100;
      relX = Math.max(0, Math.min(100, relX));
      
      sliderHandle.style.left = relX + '%';
      beforeImage.style.width = relX + '%';
    });
    
    // Prevenire închidere lightbox la click interior
    beforeAfterContainer?.addEventListener('click', function(e) {
      e.stopPropagation();
    });
    
    // Închidere lightbox la click exterior
    lightbox?.addEventListener('click', function() {
      lightbox.style.display = 'none';
      document.body.style.overflow = 'auto';
    });
    
    // Inițializare cu "toate" activ
    filterGallery('toate');
  });
</script>

<style>
  .page-header {
    background-color: var(--color-dark);
    color: white;
    padding: 5rem 0 3rem;
    text-align: center;
  }
  
  .page-title {
    font-size: 3rem;
    margin-bottom: 1rem;
  }
  
  .page-description {
    font-size: 1.2rem;
    max-width: 700px;
    margin: 0 auto;
    opacity: 0.9;
  }
  
  .gallery-filter {
    padding: 2rem 0;
    background-color: var(--bg-color);
    transition: background-color 0.3s ease;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 1rem;
  }
  
  .filter-btn {
    padding: 0.5rem 1.5rem;
    background-color: transparent;
    border: 1px solid var(--color-primary);
    border-radius: 30px;
    color: var(--color-primary);
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .filter-btn:hover, .filter-btn.active {
    background-color: var(--color-primary);
    color: white;
  }
  
  .gallery-section {
    padding: 3rem 0 5rem;
    background-color: var(--bg-color);
    transition: background-color 0.3s ease;
  }
  
  .gallery-category {
    margin-bottom: 4rem;
    display: block;
  }
  
  .gallery-category:last-child {
    margin-bottom: 0;
  }
  
  .gallery-title {
    font-size: 2rem;
    margin-bottom: 0.5rem;
    color: var(--text-color);
    transition: color 0.3s ease;
  }
  
  .gallery-description {
    font-size: 1.1rem;
    margin-bottom: 2rem;
    color: var(--secondary-text, #666);
    transition: color 0.3s ease;
  }
  
  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
  }
  
  .gallery-item {
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 5px 15px var(--shadow-color);
    transition: transform 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease;
    background-color: var(--card-bg);
  }
  
  .gallery-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px var(--shadow-color);
  }
  
  .image-container {
    position: relative;
    overflow: hidden;
    aspect-ratio: 1 / 1;
  }
  
  .gallery-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }
  
  .gallery-item:hover .gallery-image {
    transform: scale(1.05);
  }
  
  .image-overlay {
    position: absolute;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .gallery-item:hover .image-overlay {
    opacity: 1;
  }
  
  .overlay-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: white;
    font-weight: 600;
    padding: 0.8rem 1.2rem;
    border: 2px solid white;
    border-radius: 4px;
    background: transparent;
    cursor: pointer;
    transition: background-color 0.3s ease, color 0.3s ease;
  }
  
  .overlay-btn:hover {
    background-color: white;
    color: var(--color-dark);
  }
  
  .image-caption {
    padding: 1rem;
    text-align: center;
    color: var(--text-color);
    transition: color 0.3s ease;
  }
  
  .lightbox {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
    z-index: 1000;
    align-items: center;
    justify-content: center;
  }
  
  .lightbox-close {
    position: absolute;
    top: 20px;
    right: 20px;
    background: transparent;
    border: none;
    color: white;
    font-size: 30px;
    cursor: pointer;
    z-index: 1001;
  }
  
  .before-after-container {
    width: 100%;
    max-width: 800px;
    aspect-ratio: 1 / 1;
    overflow: hidden;
    position: relative;
  }
  
  .before-after-slider {
    position: relative;
    width: 100%;
    height: 100%;
  }
  
  .before-image, .after-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .before-image {
    clip-path: polygon(0 0, 50% 0, 50% 100%, 0 100%);
  }
  
  .slider-handle {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 50%;
    width: 40px;
    transform: translateX(-50%);
    cursor: ew-resize;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .handle-line {
    position: absolute;
    width: 2px;
    height: 100%;
    background-color: white;
  }
  
  .handle-circle {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-dark);
  }
  
  @media (max-width: 768px) {
    .page-header {
      padding: 4rem 0 2rem;
    }
    
    .page-title {
      font-size: 2.2rem;
    }
    
    .gallery-grid {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
    
    .lightbox-close {
      top: 20px;
      right: 20px;
    }
  }
</style> 