---
interface Props {
	title?: string;
}

const { title = "Andra-Microblading | Servicii profesionale de microblading" } = Astro.props;
import '../styles/global.css';
---

<!doctype html>
<html lang="ro">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content="Andra-Microblading - Servicii profesionale de microblading și micropigmentare a sprâncenelor" />
		<title>{title}</title>
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
		<link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
		
		<script is:inline>
			// Check for dark mode preference immediately to avoid FOUC
			const isDarkMode = localStorage.getItem('darkMode') === 'true';
			if (isDarkMode) {
				document.documentElement.classList.add('dark-mode');
			}
			
			// Theme toggle functionality (global scope)
			function toggleDarkMode() {
				const isDarkMode = document.documentElement.classList.toggle('dark-mode');
				localStorage.setItem('darkMode', isDarkMode ? 'true' : 'false');
			}

			// Initialize dark mode state on page load
			document.addEventListener('DOMContentLoaded', function() {
				if (localStorage.getItem('darkMode') === 'true') {
					document.documentElement.classList.add('dark-mode');
				}
			});
		</script>
	</head>
	<body>
		<slot />
		<script is:inline src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
		<script is:inline>
			document.addEventListener('DOMContentLoaded', function() {
				AOS.init({
					duration: 800,
					easing: 'ease-in-out',
					once: false,
					mirror: true,
					offset: 120,
					delay: 0
				});
			});
		</script>
	</body>
</html>

<style is:global>
	:root {
		--color-primary: #b76e79;
		--color-secondary: #d8a9b1;
		--color-accent: #6d4552;
		--color-light: #f8f0f2;
		--color-dark: #2e1a23;
		--font-main: 'Roboto', sans-serif;
		--font-display: 'Playfair Display', serif;
	}
	
	html,
	body {
		margin: 0;
		padding: 0;
		width: 100%;
		min-height: 100%;
		font-family: var(--font-main);
		color: var(--text-color);
		background-color: var(--bg-color);
		line-height: 1.6;
		transition: background-color 0.3s ease, color 0.3s ease;
	}
	
	h1, h2, h3, h4 {
		font-family: var(--font-display);
		font-weight: 700;
		margin: 0 0 1rem;
		line-height: 1.2;
	}
	
	a {
		color: var(--color-accent);
		text-decoration: none;
		transition: color 0.3s ease;
	}
	
	a:hover {
		color: var(--color-primary);
	}
	
	.container {
		width: 90%;
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 1rem;
		overflow-x: hidden;
	}
	
	@media (max-width: 768px) {
		.container {
			width: 95%;
			padding: 0 0.5rem;
		}
	}
	
	.btn {
		display: inline-block;
		padding: 0.75rem 1.5rem;
		border: none;
		border-radius: 4px;
		background-color: var(--color-primary);
		color: white;
		font-weight: 700;
		text-transform: uppercase;
		font-size: 0.9rem;
		cursor: pointer;
		transition: background-color 0.3s ease;
	}
	
	.btn:hover {
		background-color: var(--color-accent);
		color: white;
	}
	
	img {
		max-width: 100%;
		height: auto;
	}
	
	/* Dark Mode Toggle Button */
	.theme-toggle {
		display: flex;
		align-items: center;
		justify-content: center;
		width: 40px;
		height: 40px;
		border-radius: 50%;
		background-color: var(--card-bg);
		border: 1px solid var(--color-secondary);
		color: var(--color-primary);
		cursor: pointer;
		transition: all 0.3s ease;
		box-shadow: 0 2px 5px var(--shadow-color);
	}
	
	.theme-toggle:hover {
		transform: translateY(-2px);
		box-shadow: 0 4px 8px var(--shadow-color);
	}
	
	.theme-toggle svg {
		width: 20px;
		height: 20px;
	}
</style>
